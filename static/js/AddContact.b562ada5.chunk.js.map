{"version":3,"file":"static/js/AddContact.b562ada5.chunk.js","mappings":"0NAmBWA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP,K,4BC9BQG,E,QAAOC,GAAAA,KAAH,+Q,mBCwBjB,EAxBsB,WACpB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAmBA,MAAO,CAAEH,KAAAA,EAAME,OAAAA,EAAQE,SAjBN,SAACC,EAAYC,GAC5B,OAAQD,GACN,IAAK,OACHJ,EAAQK,GACR,MAEF,IAAK,SACHH,EAAUG,GACV,MAEF,QACEL,EAAQ,IACRE,EAAU,Q,6BCgFlB,EAlFuB,WACrB,IAAMI,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,GAAQC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASH,SAElD,EAAmCI,IAA3Bf,EAAR,EAAQA,KAAME,EAAd,EAAcA,OAAQE,EAAtB,EAAsBA,SAEhBY,EAAc7B,IACd8B,EAAgB9B,IAEhB+B,EAAmB,SAAAC,GACvBf,EAASe,EAAMC,OAAOpB,KAAMmB,EAAMC,OAAOC,QAiC3C,OACE,UAACxB,EAAD,CAAMyB,SAXa,SAAAH,GACnBA,EAAMI,iBAEN,IAvBkBC,EAuBZ/B,EAAKN,IAvBOqC,EAyBN,CAAExB,KAAAA,EAAME,OAAAA,EAAQT,GAAAA,GAxBTkB,EAAMc,MAAK,SAAAC,GAAI,OAAIA,EAAK1B,OAASwB,EAAQxB,QAE1D2B,IAAAA,OAAAA,QACE,UADF,UAEKH,EAAQxB,KAFb,yBAGE,UACA,gBAMJ2B,IAAAA,OAAAA,QAAwB,UAAW,gBAAiB,MAAM,WACxDlB,EAAS,QAGXF,GAASqB,EAAAA,EAAAA,GAASJ,KAUlBpB,KAIA,WACE,mBAAOyB,QAASb,EAAhB,WACE,oCACA,kBACEvB,GAAIuB,EACJc,SAAUZ,EACVa,KAAK,OACL/B,KAAK,OACLgC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRb,MAAOrB,QAGX,mBAAO6B,QAASZ,EAAhB,WACE,sCACA,kBACExB,GAAIwB,EACJa,SAAUZ,EACVa,KAAK,MACL/B,KAAK,SACLgC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRb,MAAOnB,QAIX,UAACiC,EAAA,EAAD,CAAQC,QAAQ,YAAYhD,KAAK,QAAQ2C,KAAK,SAA9C,UACG,IADH,qBC/EN,EATmB,WACjB,OACE,iCACE,oDACA,SAAC,EAAD","sources":["../node_modules/nanoid/index.browser.js","components/Form/Filter.styled.jsx","hooks/useGetContact.jsx","components/Form/Form.jsx","pages/addContact.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 400px;\n  border: solid 2px #000000;\n  padding: 15px;\n  label {\n    display: block;\n    margin-bottom: 15px;\n  }\n  span {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: 700;\n  }\n  input {\n    padding: 5px;\n  }\n`;\n","import { useState } from 'react';\n\nconst useGetContact = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const setState = (targetName, targetValue) => {\n    switch (targetName) {\n      case 'name':\n        setName(targetValue);\n        break;\n\n      case 'number':\n        setNumber(targetValue);\n        break;\n\n      default:\n        setName('');\n        setNumber('');\n        break;\n    }\n  };\n\n  return { name, number, setState };\n};\n\nexport default useGetContact;\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport { useNavigate } from 'react-router-dom';\n\nimport { nanoid } from 'nanoid';\nimport Notiflix from 'notiflix';\n\nimport { Form } from './Filter.styled';\n\nimport useGetContact from '../../hooks/useGetContact';\n\nimport Button from '@mui/material/Button';\n\nimport { addItems } from 'redux/contactsSlice';\n//-----------------------------------------------------\n\nconst NewContactForm = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const items = useSelector(state => state.contacts.items);\n\n  const { name, number, setState } = useGetContact();\n\n  const idInputName = nanoid();\n  const idInputNumber = nanoid();\n\n  const handeInputChange = event => {\n    setState(event.target.name, event.target.value);\n  };\n\n  const addDateForm = contact => {\n    const incontacts = items.find(item => item.name === contact.name);\n    if (incontacts) {\n      Notiflix.Report.warning(\n        'Warning',\n        `${contact.name} is alredy incontacts`,\n        'Cancel',\n        function cb() {\n          // callback\n        }\n      );\n      return;\n    }\n    Notiflix.Report.success('Success', 'Contact added', 'Ok', function cb() {\n      navigate(`/`);\n    });\n\n    dispatch(addItems(contact));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const id = nanoid();\n\n    addDateForm({ name, number, id });\n\n    setState();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <label htmlFor={idInputName}>\n        <span>Name</span>\n        <input\n          id={idInputName}\n          onChange={handeInputChange}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n        />\n      </label>\n      <label htmlFor={idInputNumber}>\n        <span>Number</span>\n        <input\n          id={idInputNumber}\n          onChange={handeInputChange}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n        />\n      </label>\n\n      <Button variant=\"contained\" size=\"small\" type=\"submit\">\n        {' '}\n        Add contact\n      </Button>\n    </Form>\n  );\n};\n\nexport default NewContactForm;\n","import NewContactForm from '../components/Form';\n\nconst AddContact = () => {\n  return (\n    <>\n      <h2>Enter contact details:</h2>\n      <NewContactForm />\n    </>\n  );\n};\n\nexport default AddContact;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","Form","styled","useState","name","setName","number","setNumber","setState","targetName","targetValue","dispatch","useDispatch","navigate","useNavigate","items","useSelector","state","contacts","useGetContact","idInputName","idInputNumber","handeInputChange","event","target","value","onSubmit","preventDefault","contact","find","item","Notiflix","addItems","htmlFor","onChange","type","pattern","title","required","Button","variant"],"sourceRoot":""}